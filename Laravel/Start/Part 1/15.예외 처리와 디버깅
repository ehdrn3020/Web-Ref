15.1 전역 예외 처리기

-역추적 로그 원인 파악(오류 코드)
public function show($id){
    echo $foo;
    return __METHOD__ . '은(는) 다음 기본 키를 가직 Article모텔을 조회합니다.:' . $id;
}
- 사용자 코드에서 try-catch문을 사용하지 않는한, 모든 예외는 전역예외 처리기가 잡는다.

[app/Exceptions/Handler.php]
/*해당 예외는 로그 기록되지 않고, 보고 로직도 타지 않는다*/
protected $dontReport = [...];

/*예외를 보고하는 메서드*/
public function report(Exception $exception){
        //로그에 예외를 기록
        parent::report($exception);
    }

/*예외를 화면에 표시하는 메서드*/
public function render($request, Exception $exception){
        //보고한 후 다음 로직을 수행한다.
        return parent::render($request, $exception);
    }
    
    
15.2 실용적인 예외 처리
-사용자 친화적인 예외처리 페이지 구현
[Controller]
public function show($id){
        //$id에 해당하는 모델이 없으면 Illuminate\Database\Eloquent\ModelNotFoundException예회
        $article = \App\Article::findOrFail($id);
        return $article->toArray();
    }
    
[Exception/Handler.php]
-운영환영일때 가로챈다
public function render($request, Exception $exception){   
      //인자로 받은 문자열과 현재 실행 환경을 비교함. 같으면 true
      if(app()->environment('production')){
      
       //instanceof는 객체 타입을 검사한다.
       if($exception instanceof \Illuminate\Database\Eloquent\ModelNotFoundException) {
       //response() http응답 도우미 함수
          return response(view('errors.notice',[
            'title'=>'찾을 수 없습니다.',
            'description'=>'요청하신 페이지가 없습니다.'
          ]), 404);
        }
      }
        return parent::render($request, $exception);
    }


[views/errors/notice.blade.php]
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>{{ $title }}</title>
    <style media="screen">
      body { left: 50%; position: absolute; top: 50%; width: 300px;}
    </style>
  </head>
  <body>
    <h1>{{ $title }}</h1>
    <p>{{ $description }}</p>
  </body>
</html>

[.env]
APP_ENV=production


15.4 디버깅
dd($article);
dd('reached');

-뷰디버깅
dd(view('articles.index', compact('articles'))->render());

-쿼리디버깅
DB::listen(function ($query){
  var_dump($query->sql);
});

-콘솔디버깅
storage/logs/laravel.log파일


