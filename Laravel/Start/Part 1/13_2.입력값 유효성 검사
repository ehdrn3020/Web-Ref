/*13_1 코드 이어서*/

[view layout\app.blade.php]
</nav>
  <!-- 플래쉬 메세지 출력 -->
    @if()(session()->has('flash_message'))
    <div class="alert alert-info" role="alert">
      {{ session('flash_message')}}
    </div>
    @endif

[오류 메세지 한글화]
[config\app.php]
return[ ..
  'locale'=>'ko',
 ..]          //유효성 검사 오류를 표시하는 언어 파일이 없어 그대로 일 수도
 
[Controller]
public function store(Request $request){
...
$messages=[
        'title.required'=>'제목은 필수 입력 항목입니다.',
        'content.required'=>'본문은 필수 입력 항목입니다.',
        'content.min'=>'본문은 최소 :min 글자 이상이 필요합니다.',
      ];
$validator = \Validator::make($request->all(), $rules, $messages);
...}



13.2 트레이드 메서드 이용
$validator = \Validator::make($request->all(), $rules, $messages);
if($validator->fails()){
    return back()->withErrors($validator)->withInput();
}
=> 트레이드사용, 코드간결
$this->validate($request, $rules, $messages);



13.3 폼 리퀘스트 클래스 이용
$php artisan make:request ArticlesRequest

app\Http|Requests디렉터리에 있다.
class ArticlesRequest extends FormRequest{
    /*사용자가 이 메서드에 접근할 권한 확인*/
    public function authorize(){
        return true;
    }
    /*유효성 검사 규칙을 정의*/
    public function rules(){
        return [
            'title'=>['required'],
            'content'=>['required', 'min:10'],
        ];
    }
    /*검사 오류 메세지를 정의*/
    public function messages(){
      return [
        'required'=>':attribute은(는) 필수 입력 항목입니다.',
        'min'=>':attribute은(는) 최소 :min 글자 이상이 필요합니다.',
      ];
    }
    /*필드이름 정의*/
    public function attribute(){
      return [
        'title'=>'제목',
        'content'=>'본문',
      ];
    }
}

[Controller]
/*Illuminate\Http|request인스턴스 대신, 폼 리퀘스트 인스턴스 주입*/
public function store(\App\Http\Requests\ArticlesRequest $request){       //use \App\Http\Requests\ArticlesRequest 이용가능
      $article = \App\User::find(1)->articles()->create($request->all());
      if(!$article){
        return back()->with('flash_message','글이 저장되지 않습니다.')->withInput();
      }
      return redirect(route('articles.index'))->with('flash_message','작성하신 글이 저장되었습니다.');
  }
  
  
